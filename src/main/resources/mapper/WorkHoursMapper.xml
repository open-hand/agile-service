<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.choerodon.agile.infra.mapper.WorkHoursMapper">
    <select id="listByProjectIds" resultType="io.choerodon.agile.api.vo.WorkHoursLogVO">
        select
            *
        from
        (
            select
                ai.summary,
                CONVERT(ai.issue_num,SIGNED) as issue_num_convert,
                CONCAT(api.project_code,'-', ai.issue_num) as issue_num,
                ai.status_id,
                ai.issue_type_id,
                awl.work_time,
                awl.project_id,
                awl.created_by as user_id,
                awl.start_date,
                ai.issue_id,
                ai.object_version_number,
                awl.creation_date,
                ai.estimate_time
            from agile_work_log awl
            JOIN agile_issue ai on ai.issue_id = awl.issue_id
            LEFT JOIN agile_project_info api on api.project_id = ai.project_id
            where awl.project_id in
            <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
                #{projectId}
            </foreach>
            <if test="workHoursSearchVO.userIds != null and workHoursSearchVO.userIds.size > 0">
                and awl.created_by in
                <foreach collection="workHoursSearchVO.userIds" item="userId" open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            <if test="workHoursSearchVO.startTime != null and workHoursSearchVO.endTime != null">
                and awl.start_date between #{workHoursSearchVO.startTime} and #{workHoursSearchVO.endTime}
            </if>
        ) wl
    </select>

    <select id="listGroupDataByProjectIds" resultType="io.choerodon.agile.api.vo.WorkHoursLogVO">
        select
            wl.summary,
            wl.issue_num_convert,
            SUM(wl.work_time) as work_time,
            wl.project_id,
            wl.user_id,
            wl.start_date,
            wl.issue_id,
            wl.estimate_time
        from
        (
            select
            ai.summary,
            CONVERT(ai.issue_num,SIGNED) as issue_num_convert,
            awl.work_time,
            awl.project_id,
            awl.created_by as user_id,
            DATE_FORMAT(awl.start_date,'%Y-%m-%d') as start_date,
            ai.issue_id,
            ai.estimate_time
            from agile_work_log awl
            JOIN agile_issue ai on ai.issue_id = awl.issue_id
            LEFT JOIN agile_project_info api on api.project_id = ai.project_id
            where awl.project_id in
            <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
                #{projectId}
            </foreach>
            <if test="workHoursSearchVO.userIds != null and workHoursSearchVO.userIds.size > 0">
                and awl.created_by in
                <foreach collection="workHoursSearchVO.userIds" item="userId" open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            <if test="workHoursSearchVO.startTime != null and workHoursSearchVO.endTime != null">
                and awl.start_date between #{workHoursSearchVO.startTime} and #{workHoursSearchVO.endTime}
            </if>
        ) wl
        group by
            wl.issue_id,
            wl.user_id,
            wl.start_date,
            wl.project_id
        order by wl.start_date
    </select>

    <select id="countUserWorkTime"  resultType="io.choerodon.agile.api.vo.WorkHoursLogVO">
        select
        SUM(wl.work_time) as work_time,
        wl.user_id,
        wl.start_date
        from
        (
        select
            awl.work_time,
            awl.created_by as user_id,
            DATE_FORMAT(awl.start_date,'%Y-%m-%d') as start_date
        from agile_work_log awl
        where awl.project_id in
        <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
            #{projectId}
        </foreach>
        <if test="workHoursSearchVO.startTime != null and workHoursSearchVO.endTime != null">
            and awl.start_date between #{workHoursSearchVO.startTime} and #{workHoursSearchVO.endTime}
        </if>
        <if test="workHoursSearchVO.userIds != null and workHoursSearchVO.userIds.size > 0">
            and awl.created_by in
            <foreach collection="workHoursSearchVO.userIds" item="userId" open="(" close=")" separator=",">
                #{userId}
            </foreach>
        </if>
        ) wl
        group by
        wl.user_id,
        wl.start_date
    </select>
    
    <select id="selectUserIds" resultType="java.lang.Long">
        select
         awl.created_by
        from agile_work_log awl
        where awl.project_id in
        <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
            #{projectId}
        </foreach>
        <if test="workHoursSearchVO.startTime != null and workHoursSearchVO.endTime != null">
            and awl.start_date between #{workHoursSearchVO.startTime} and #{workHoursSearchVO.endTime}
        </if>
        <if test="workHoursSearchVO.userIds != null and workHoursSearchVO.userIds.size > 0">
            and awl.created_by in
            <foreach collection="workHoursSearchVO.userIds" item="userId" open="(" close=")" separator=",">
                #{userId}
            </foreach>
        </if>
    </select>

    <select id="queryIssue" resultType="io.choerodon.agile.api.vo.business.IssueVO">
        select * from (
            select
              ai.issue_id,
              CONVERT(ai.issue_num,SIGNED) as issue_num_convert,
              CONCAT(api.project_code,'-', ai.issue_num) as issue_num,
              ai.issue_type_id,
              ai.summary
            from agile_issue ai
            LEFT JOIN agile_project_info api on api.project_id = ai.project_id
            where ai.project_id = #{projectId}
            AND ai.type_code in ('story', 'task', 'sub_task', 'bug')
            <if test="params != null">
                and ai.summary like concat(concat('%', #{params}),'%')
            </if>
        ) aii
        order by aii.issue_num_convert desc
    </select>

    <select id="queryParentIssueIdsList" resultType="io.choerodon.agile.infra.dto.business.IssueDTO">
        select
        ai.issue_id,
        ai.project_id,
        CONVERT(ai.issue_num,SIGNED) as issue_num_convert
        from (
          select temp.issue_id
            from (
                SELECT
                    case
                    when ai.type_code = 'sub_task' then ai.parent_issue_id
                    when ai.type_code = 'bug' and ai.relate_issue_id is not null and ai.relate_issue_id != 0 then ai.relate_issue_id
                    else ai.issue_id
                    end as issue_id
                FROM agile_issue ai
                WHERE ai.project_id in
                <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                    #{projectId}
                </foreach>
                AND ai.issue_id in (
                   select awl.issue_id from agile_work_log awl
                   where
                   awl.project_id in
                   <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                        #{projectId}
                   </foreach>
                   <if test="searchVO.searchArgs != null">
                       <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                           and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
                       </if>
                   </if>
                 )
                AND ai.apply_type = 'agile'
                <include refid="io.choerodon.agile.infra.mapper.IssueMapper.explainSearchVO"/>
                <include refid="io.choerodon.agile.infra.mapper.IssueMapper.filterSqlAndAssigneeIds"/>
                <if test='searchVO.searchArgs != null'>
                    <if test='searchVO.searchArgs.issueNum != null and searchVO.searchArgs.issueNum != ""'>
                        AND ai.issue_num LIKE CONCAT(CONCAT('%' ,#{searchVO.searchArgs.issueNum}) ,'%')
                    </if>
                </if>
                <if test='searchVO.contents != null and searchVO.contents.size != 0'>
                    <foreach collection="searchVO.contents" item="content" index="index">
                        AND (
                        ai.issue_num LIKE CONCAT(CONCAT('%', #{content}), '%')
                        OR ai.summary LIKE CONCAT(CONCAT('%', #{content}), '%')
                        )
                    </foreach>
                </if>
            ) temp
            group by temp.issue_id
        ) ai1
        join agile_issue ai
        on (
        ai.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and ai.apply_type = 'agile'
        and ai1.issue_id = ai.issue_id
        )
        <if test="sortMap != null and sortMap.sortFieldId != null ">
            LEFT JOIN
            (
            SELECT
            instance_id,
            date_value,
            option_id,
            string_value,
            text_value,
            number_value
            FROM fd_field_value ffv
            JOIN agile_issue ai ON ai.issue_id = ffv.instance_id AND ai.project_id in
            <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                #{projectId}
            </foreach>
            WHERE ffv.field_id = #{sortMap.sortFieldId}
            AND ffv.project_id in
            <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                #{projectId}
            </foreach>
            AND ai.issue_type_id IN
            <foreach collection="sortMap.fieldExtendIssueTypeIds" item="issueTypeId" open="(" separator="," close=")">
                #{issueTypeId}
            </foreach>
            ) fv ON ai.issue_id = fv.instance_id
        </if>
        where ai.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and ai.apply_type = 'agile'
        and (
        ai.type_code in ('issue_epic', 'story', 'task')
        or (ai.type_code = 'bug' and (ai.relate_issue_id is null or ai.relate_issue_id = 0))
        )
        <if test="sortMap != null and sortMap.orderStr != null">
            ORDER BY ${sortMap.orderStr}
        </if>
    </select>

    <select id="countWorkTime" resultType="io.choerodon.agile.infra.dto.WorkLogDTO">
        select
          awl.issue_id,
          SUM(awl.work_time) as work_time
        from agile_work_log awl
        where
        awl.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and awl.issue_id in
        <foreach collection="allIssueIds" item="allIssueId" open="(" separator="," close=")">
            #{allIssueId}
        </foreach>
        <if test="searchVO != null">
            <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
            </if>
        </if>
        group by awl.issue_id
    </select>

    <select id="queryIds" resultType="java.lang.Long">
        SELECT temp.id  FROM (
            SELECT
               DISTINCT
               <choose>
                   <when test="levelType == 'assignee'">
                       ai.assignee_id as id
                   </when>
                   <otherwise>
                       ai.project_id as id
                   </otherwise>
               </choose>
            FROM agile_issue ai
            WHERE ai.project_id IN
            <foreach collection="projectIds" item="projectId" open="(" close=")" separator=",">
                #{projectId}
            </foreach>
            AND ai.issue_id IN
            <foreach collection="issueIds" item="issueId" open="(" close=")" separator=",">
                #{issueId}
            </foreach>
            <if test="levelType == 'assignee'">
                AND ai.assignee_id IS NOT NULL
                AND ai.assignee_id != 0
            </if>
        ) temp order by temp.id
    </select>

    <select id="queryProjectAssigneeIds" resultType="io.choerodon.agile.api.vo.IssueWorkHoursVO">
        SELECT
            temp.user_id,
            temp.project_id,
            SUM(temp.estimate_time) as estimate_time
        FROM (
            SELECT
                ai.assignee_id as user_id,
                ai.project_id as project_id,
                IFNULL(ai.estimate_time, 0) as estimate_time
            FROM agile_issue ai
            WHERE ai.project_id IN
            <foreach collection="projectIds" item="projectId" open="(" close=")" separator=",">
                #{projectId}
            </foreach>
            AND ai.issue_id IN
            <foreach collection="issueIds" item="issueId" open="(" close=")" separator=",">
                #{issueId}
            </foreach>
            AND ai.assignee_id IS NOT NULL
            AND ai.assignee_id != 0
        ) temp
        group by temp.user_id, temp.project_id
    </select>

    <select id="countAssigneeWorkTime" resultType="io.choerodon.agile.api.vo.IssueWorkHoursVO">
        select
        ai.assignee_id as user_id,
        SUM(awl.work_time) as work_time,
        SUM(ai.estimate_time) as estimate_time
        from agile_work_log awl
        JOIN agile_issue ai on ai.issue_id = awl.issue_id
        where
        awl.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and awl.issue_id in
        <foreach collection="allIssueIds" item="allIssueId" open="(" separator="," close=")">
            #{allIssueId}
        </foreach>
        AND ai.assignee_id IS NOT NULL
        AND ai.assignee_id != 0
        <if test="searchVO != null">
            <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
            </if>
        </if>
        group by ai.assignee_id
    </select>

    <select id="countProjectAssigneeWorkTime" resultType="io.choerodon.agile.api.vo.IssueWorkHoursVO">
        select
        ai.assignee_id as user_id,
        ai.project_id as project_id,
        SUM(awl.work_time) as work_time
        from agile_work_log awl
        JOIN agile_issue ai on ai.issue_id = awl.issue_id
        where
        awl.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and awl.issue_id in
        <foreach collection="allIssueIds" item="allIssueId" open="(" separator="," close=")">
            #{allIssueId}
        </foreach>
        AND ai.assignee_id IS NOT NULL
        AND ai.assignee_id != 0
        <if test="searchVO != null">
            <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
            </if>
        </if>
        group by ai.project_id, ai.assignee_id
    </select>

    <select id="countProjectWorkTime" resultType="io.choerodon.agile.api.vo.IssueWorkHoursVO">
        select
        ai.project_id,
        SUM(awl.work_time) as work_time,
        SUM(ai.estimate_time) as estimate_time
        from agile_work_log awl
        JOIN agile_issue ai on ai.issue_id = awl.issue_id
        where
        awl.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and awl.issue_id in
        <foreach collection="allIssueIds" item="allIssueId" open="(" separator="," close=")">
            #{allIssueId}
        </foreach>
        <if test="searchVO != null">
            <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
            </if>
        </if>
        group by ai.project_id
    </select>

    <select id="queryChildrenIdByParentId" resultType="io.choerodon.agile.infra.dto.business.IssueDTO">
        select
        ai.issue_id,
        ai.project_id,
        <if test="searchVO.ganttDefaultOrder">
            agir.rank,
            agir.instance_id,
            agir.instance_type,
        </if>
        CONVERT(ai.issue_num,SIGNED) as issue_num_convert
        from agile_issue ai
        <if test="searchVO.ganttDefaultOrder">
            left join agile_gantt_issue_rank agir on ai.issue_id = agir.issue_id and agir.dimension = #{searchVO.searchArgs.dimension}
        </if>
        <if test="sortMap != null and sortMap.sortFieldId != null ">
            LEFT JOIN
            (
            SELECT
            instance_id,
            date_value,
            option_id,
            string_value,
            text_value,
            number_value
            FROM fd_field_value ffv
            JOIN agile_issue ai ON ai.issue_id = ffv.instance_id
            AND ai.project_id in
            <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                #{projectId}
            </foreach>
            WHERE ffv.field_id = #{sortMap.sortFieldId}
            AND ffv.project_id in
            <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                #{projectId}
            </foreach>
            AND ai.issue_type_id IN
            <foreach collection="sortMap.fieldExtendIssueTypeIds" item="issueTypeId" open="(" separator="," close=")">
                #{issueTypeId}
            </foreach>
            ) fv ON ai.issue_id = fv.instance_id
        </if>
        where ai.project_id in
        <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
            #{projectId}
        </foreach>
        and ai.issue_id in (
            select awl.issue_id from agile_work_log awl
            where
            awl.project_id in
            <foreach collection="projectIds" item="projectId" open="(" separator="," close=")">
                #{projectId}
            </foreach>
            <if test="searchVO.searchArgs != null">
                <if test="searchVO.searchArgs.startTime != null and searchVO.searchArgs.endTime != null">
                    and awl.start_date between #{searchVO.searchArgs.startTime} and #{searchVO.searchArgs.endTime}
                </if>
            </if>
        )
        and ai.apply_type = 'agile'
        and ai.type_code in ('sub_task', 'bug')
        and (
        ai.parent_issue_id in
        <foreach collection="issueIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        or
        ai.type_code = 'bug'
        and ai.relate_issue_id in
        <foreach collection="issueIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        )
        <include refid="io.choerodon.agile.infra.mapper.IssueMapper.explainSearchVO"/>
        <include refid="io.choerodon.agile.infra.mapper.IssueMapper.filterSqlAndAssigneeIds"/>
        <if test='searchVO.searchArgs != null'>
            <if test='searchVO.searchArgs.issueNum != null and searchVO.searchArgs.issueNum != ""'>
                AND ai.issue_num LIKE CONCAT(CONCAT('%' ,#{searchVO.searchArgs.issueNum}) ,'%')
            </if>
        </if>
        <if test='searchVO.contents != null and searchVO.contents.size != 0'>
            <foreach collection="searchVO.contents" item="content" index="index">
                AND (ai.issue_num LIKE CONCAT(CONCAT('%', #{content}), '%')
                OR ai.summary LIKE CONCAT(CONCAT('%', #{content}), '%'))
            </foreach>
        </if>
        <if test="sortMap != null and sortMap.orderStr != null">
            ORDER BY ${sortMap.orderStr}
        </if>
    </select>
</mapper>